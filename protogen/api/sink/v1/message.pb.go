// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/sink/v1/message.proto

package sink

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type State int32

const (
	STATE_UNSPECIFIED State = 0
	STATE_CREATING    State = 1
	STATE_ACTIVE      State = 2
	STATE_DELETED     State = 3
	// The sink has error and cannot receive logs.
	STATE_ERROR State = 4
)

var State_name = map[int32]string{
	0: "Unspecified",
	1: "Creating",
	2: "Active",
	3: "Deleted",
	4: "Error",
}

var State_value = map[string]int32{
	"Unspecified": 0,
	"Creating":    1,
	"Active":      2,
	"Deleted":     3,
	"Error":       4,
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{0}
}

type DestinationType int32

const (
	DESTINATION_TYPE_UNSPECIFIED DestinationType = 0
	DESTINATION_TYPE_KINESIS     DestinationType = 1
	DESTINATION_TYPE_S3          DestinationType = 2
)

var DestinationType_name = map[int32]string{
	0: "Unspecified",
	1: "Kinesis",
	2: "S3",
}

var DestinationType_value = map[string]int32{
	"Unspecified": 0,
	"Kinesis":     1,
	"S3":          2,
}

func (DestinationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{1}
}

type Type int32

const (
	TYPE_UNSPECIFIED            Type = 0
	TYPE_AUDIT_LOG              Type = 1
	TYPE_CLOSED_WORKFLOW_EXPORT Type = 2
)

var Type_name = map[int32]string{
	0: "Unspecified",
	1: "AuditLog",
	2: "ClosedWorkflowExport",
}

var Type_value = map[string]int32{
	"Unspecified":          0,
	"AuditLog":             1,
	"ClosedWorkflowExport": 2,
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{2}
}

type KinesisSpec struct {
	// The role Temporal Cloud assumes when writing records to Kinesis
	AssumedRole string `protobuf:"bytes,1,opt,name=assumed_role,json=assumedRole,proto3" json:"assumed_role,omitempty"`
	// Destination Kinesis endpoint arn for us to send data to.
	DestinationUri string `protobuf:"bytes,2,opt,name=destination_uri,json=destinationUri,proto3" json:"destination_uri,omitempty"`
	// The sink's region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *KinesisSpec) Reset()      { *m = KinesisSpec{} }
func (*KinesisSpec) ProtoMessage() {}
func (*KinesisSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{0}
}
func (m *KinesisSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KinesisSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KinesisSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KinesisSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KinesisSpec.Merge(m, src)
}
func (m *KinesisSpec) XXX_Size() int {
	return m.Size()
}
func (m *KinesisSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KinesisSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KinesisSpec proto.InternalMessageInfo

func (m *KinesisSpec) GetAssumedRole() string {
	if m != nil {
		return m.AssumedRole
	}
	return ""
}

func (m *KinesisSpec) GetDestinationUri() string {
	if m != nil {
		return m.DestinationUri
	}
	return ""
}

func (m *KinesisSpec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type KinesisStatus struct {
	// This is for the message from third party sink e.g. Kinesis error message returned from PutRecord call.
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *KinesisStatus) Reset()      { *m = KinesisStatus{} }
func (*KinesisStatus) ProtoMessage() {}
func (*KinesisStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{1}
}
func (m *KinesisStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KinesisStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KinesisStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KinesisStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KinesisStatus.Merge(m, src)
}
func (m *KinesisStatus) XXX_Size() int {
	return m.Size()
}
func (m *KinesisStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KinesisStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KinesisStatus proto.InternalMessageInfo

func (m *KinesisStatus) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type SinkSpec struct {
	// Name of the sink e.g. "audit_log_01"
	Sink string `protobuf:"bytes,1,opt,name=sink,proto3" json:"sink,omitempty"`
	// Type of the sink.
	SinkType Type `protobuf:"varint,2,opt,name=sink_type,json=sinkType,proto3,enum=api.sink.v1.Type" json:"sink_type,omitempty"`
	// The receiving service type.
	DestinationType DestinationType `protobuf:"varint,3,opt,name=destination_type,json=destinationType,proto3,enum=api.sink.v1.DestinationType" json:"destination_type,omitempty"`
	// The KinesisSpec when destination_type is Kinesis
	KinesisSink *KinesisSpec `protobuf:"bytes,4,opt,name=kinesis_sink,json=kinesisSink,proto3" json:"kinesis_sink,omitempty"`
	// The S3spec when destination_type is S3
	S3Sink *S3Spec `protobuf:"bytes,5,opt,name=s3_sink,json=s3Sink,proto3" json:"s3_sink,omitempty"`
}

func (m *SinkSpec) Reset()      { *m = SinkSpec{} }
func (*SinkSpec) ProtoMessage() {}
func (*SinkSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{2}
}
func (m *SinkSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SinkSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SinkSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SinkSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinkSpec.Merge(m, src)
}
func (m *SinkSpec) XXX_Size() int {
	return m.Size()
}
func (m *SinkSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SinkSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SinkSpec proto.InternalMessageInfo

func (m *SinkSpec) GetSink() string {
	if m != nil {
		return m.Sink
	}
	return ""
}

func (m *SinkSpec) GetSinkType() Type {
	if m != nil {
		return m.SinkType
	}
	return TYPE_UNSPECIFIED
}

func (m *SinkSpec) GetDestinationType() DestinationType {
	if m != nil {
		return m.DestinationType
	}
	return DESTINATION_TYPE_UNSPECIFIED
}

func (m *SinkSpec) GetKinesisSink() *KinesisSpec {
	if m != nil {
		return m.KinesisSink
	}
	return nil
}

func (m *SinkSpec) GetS3Sink() *S3Spec {
	if m != nil {
		return m.S3Sink
	}
	return nil
}

type Sink struct {
	// Name of the sink e.g. "audit_log_01"
	Sink    string `protobuf:"bytes,1,opt,name=sink,proto3" json:"sink,omitempty"`
	State   State  `protobuf:"varint,2,opt,name=state,proto3,enum=api.sink.v1.State" json:"state,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Last succeeded data sent timestamp, this is used to get the start time of backfill if necessary.
	LastSucceededTime *types.Timestamp `protobuf:"bytes,4,opt,name=last_succeeded_time,json=lastSucceededTime,proto3" json:"last_succeeded_time,omitempty"`
	// The status of Kinesis
	KinesisStatus *KinesisStatus `protobuf:"bytes,5,opt,name=kinesis_status,json=kinesisStatus,proto3" json:"kinesis_status,omitempty"`
	// The status of S3
	S3Status *S3Status `protobuf:"bytes,6,opt,name=s3_status,json=s3Status,proto3" json:"s3_status,omitempty"`
}

func (m *Sink) Reset()      { *m = Sink{} }
func (*Sink) ProtoMessage() {}
func (*Sink) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{3}
}
func (m *Sink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sink.Merge(m, src)
}
func (m *Sink) XXX_Size() int {
	return m.Size()
}
func (m *Sink) XXX_DiscardUnknown() {
	xxx_messageInfo_Sink.DiscardUnknown(m)
}

var xxx_messageInfo_Sink proto.InternalMessageInfo

func (m *Sink) GetSink() string {
	if m != nil {
		return m.Sink
	}
	return ""
}

func (m *Sink) GetState() State {
	if m != nil {
		return m.State
	}
	return STATE_UNSPECIFIED
}

func (m *Sink) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Sink) GetLastSucceededTime() *types.Timestamp {
	if m != nil {
		return m.LastSucceededTime
	}
	return nil
}

func (m *Sink) GetKinesisStatus() *KinesisStatus {
	if m != nil {
		return m.KinesisStatus
	}
	return nil
}

func (m *Sink) GetS3Status() *S3Status {
	if m != nil {
		return m.S3Status
	}
	return nil
}

// ---------- Newly added ---------------------
// TODO: Will delete the comment in the future
type S3Spec struct {
	// The role Temporal Cloud assumes when writing records to customer's S3 bucket
	AssumedRole string `protobuf:"bytes,1,opt,name=assumed_role,json=assumedRole,proto3" json:"assumed_role,omitempty"`
	// Destination S3 ARN for us to send data to.
	DestinationArn string `protobuf:"bytes,2,opt,name=destination_arn,json=destinationArn,proto3" json:"destination_arn,omitempty"`
	// The region of the S3 bucket
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Optional prefix placed in front of all blobs that are written.
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *S3Spec) Reset()      { *m = S3Spec{} }
func (*S3Spec) ProtoMessage() {}
func (*S3Spec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{4}
}
func (m *S3Spec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3Spec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3Spec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3Spec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3Spec.Merge(m, src)
}
func (m *S3Spec) XXX_Size() int {
	return m.Size()
}
func (m *S3Spec) XXX_DiscardUnknown() {
	xxx_messageInfo_S3Spec.DiscardUnknown(m)
}

var xxx_messageInfo_S3Spec proto.InternalMessageInfo

func (m *S3Spec) GetAssumedRole() string {
	if m != nil {
		return m.AssumedRole
	}
	return ""
}

func (m *S3Spec) GetDestinationArn() string {
	if m != nil {
		return m.DestinationArn
	}
	return ""
}

func (m *S3Spec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *S3Spec) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type S3Status struct {
	// This is for the message from third party sink e.g. S3 error message returned from PutObject call.
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *S3Status) Reset()      { *m = S3Status{} }
func (*S3Status) ProtoMessage() {}
func (*S3Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef8b1808dc5a7594, []int{5}
}
func (m *S3Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3Status.Merge(m, src)
}
func (m *S3Status) XXX_Size() int {
	return m.Size()
}
func (m *S3Status) XXX_DiscardUnknown() {
	xxx_messageInfo_S3Status.DiscardUnknown(m)
}

var xxx_messageInfo_S3Status proto.InternalMessageInfo

func (m *S3Status) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.sink.v1.State", State_name, State_value)
	proto.RegisterEnum("api.sink.v1.DestinationType", DestinationType_name, DestinationType_value)
	proto.RegisterEnum("api.sink.v1.Type", Type_name, Type_value)
	proto.RegisterType((*KinesisSpec)(nil), "api.sink.v1.KinesisSpec")
	proto.RegisterType((*KinesisStatus)(nil), "api.sink.v1.KinesisStatus")
	proto.RegisterType((*SinkSpec)(nil), "api.sink.v1.SinkSpec")
	proto.RegisterType((*Sink)(nil), "api.sink.v1.Sink")
	proto.RegisterType((*S3Spec)(nil), "api.sink.v1.S3Spec")
	proto.RegisterType((*S3Status)(nil), "api.sink.v1.S3Status")
}

func init() { proto.RegisterFile("api/sink/v1/message.proto", fileDescriptor_ef8b1808dc5a7594) }

var fileDescriptor_ef8b1808dc5a7594 = []byte{
	// 728 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x18, 0x8d, 0xd3, 0x34, 0x4d, 0xbe, 0xfc, 0xd4, 0x99, 0xde, 0xde, 0x9b, 0xdb, 0x1b, 0xb9, 0xbd,
	0x61, 0x41, 0x55, 0x21, 0x47, 0x6d, 0xd8, 0x75, 0x15, 0x12, 0xb7, 0x32, 0x0d, 0x49, 0x19, 0xbb,
	0x14, 0xd8, 0x58, 0x6e, 0x32, 0x0d, 0x26, 0x89, 0x6d, 0x3c, 0x4e, 0x45, 0x77, 0x08, 0xf1, 0x00,
	0xbc, 0x02, 0x3b, 0x1e, 0x85, 0x65, 0x97, 0x5d, 0x52, 0x77, 0xc3, 0xb2, 0x8f, 0x80, 0x66, 0x6c,
	0x43, 0xd2, 0x06, 0x09, 0xb1, 0xf2, 0xcc, 0xf9, 0xbe, 0xf3, 0xcd, 0x9c, 0x33, 0x47, 0x86, 0x7f,
	0x4d, 0xd7, 0xaa, 0x51, 0xcb, 0x1e, 0xd6, 0xce, 0xb6, 0x6b, 0x63, 0x42, 0xa9, 0x39, 0x20, 0xb2,
	0xeb, 0x39, 0xbe, 0x83, 0x72, 0xa6, 0x6b, 0xc9, 0xac, 0x24, 0x9f, 0x6d, 0xaf, 0xad, 0x0f, 0x1c,
	0x67, 0x30, 0x22, 0x35, 0x5e, 0x3a, 0x99, 0x9c, 0xd6, 0x7c, 0x6b, 0x4c, 0xa8, 0x6f, 0x8e, 0xdd,
	0xb0, 0xbb, 0xfa, 0x06, 0x72, 0x07, 0x96, 0x4d, 0xa8, 0x45, 0x35, 0x97, 0xf4, 0xd0, 0xff, 0x90,
	0x37, 0x29, 0x9d, 0x8c, 0x49, 0xdf, 0xf0, 0x9c, 0x11, 0x29, 0x0b, 0x1b, 0xc2, 0x66, 0x16, 0xe7,
	0x22, 0x0c, 0x3b, 0x23, 0x82, 0xee, 0xc3, 0x72, 0x9f, 0x50, 0xdf, 0xb2, 0x4d, 0xdf, 0x72, 0x6c,
	0x63, 0xe2, 0x59, 0xe5, 0x24, 0xef, 0x2a, 0x4e, 0xc1, 0x47, 0x9e, 0x85, 0xfe, 0x86, 0xb4, 0x47,
	0x06, 0x96, 0x63, 0x97, 0x17, 0x78, 0x3d, 0xda, 0x55, 0x1f, 0x42, 0x21, 0x3e, 0xd2, 0x37, 0xfd,
	0x09, 0x45, 0xf7, 0xa0, 0x40, 0x3c, 0xcf, 0xf1, 0x8c, 0x48, 0x48, 0x74, 0x6a, 0x9e, 0x83, 0x4f,
	0x42, 0xac, 0xfa, 0x3e, 0x09, 0x19, 0xcd, 0xb2, 0x87, 0xfc, 0x9a, 0x08, 0x52, 0x4c, 0x61, 0xd4,
	0xc8, 0xd7, 0x48, 0x86, 0x2c, 0xfb, 0x1a, 0xfe, 0xb9, 0x4b, 0xf8, 0x8d, 0x8a, 0x3b, 0x25, 0x79,
	0xca, 0x0b, 0x59, 0x3f, 0x77, 0x09, 0xce, 0xb0, 0x1d, 0x5b, 0xa1, 0x7d, 0x10, 0xa7, 0x75, 0x70,
	0xda, 0x02, 0xa7, 0x55, 0x66, 0x68, 0xad, 0x9f, 0x4d, 0x7c, 0xc2, 0xb4, 0x7a, 0x3e, 0x68, 0x17,
	0xf2, 0xc3, 0x50, 0x8f, 0xc1, 0x2f, 0x95, 0xda, 0x10, 0x36, 0x73, 0x3b, 0xe5, 0x99, 0x21, 0x53,
	0x1e, 0xe3, 0x5c, 0xd4, 0xcd, 0xd4, 0xa0, 0x07, 0xb0, 0x44, 0xeb, 0x21, 0x6f, 0x91, 0xf3, 0x56,
	0x66, 0x78, 0x5a, 0x9d, 0x53, 0xd2, 0xb4, 0xce, 0xba, 0xab, 0x9f, 0x92, 0x90, 0xe2, 0xb4, 0x79,
	0x06, 0x6c, 0xc2, 0x22, 0xf5, 0x4d, 0x3f, 0x16, 0x8f, 0x66, 0x07, 0xb1, 0x0a, 0x0e, 0x1b, 0x50,
	0x19, 0x96, 0x62, 0xab, 0xc3, 0xa7, 0x89, 0xb7, 0xe8, 0x31, 0xac, 0x8c, 0x4c, 0xea, 0x1b, 0x74,
	0xd2, 0xeb, 0x11, 0xd2, 0x27, 0x7d, 0x83, 0x05, 0x26, 0x92, 0xb4, 0x26, 0x87, 0x69, 0x92, 0xe3,
	0x34, 0xc9, 0x7a, 0x9c, 0x26, 0x5c, 0x62, 0x34, 0x2d, 0x66, 0x31, 0x1c, 0x35, 0xa0, 0xf8, 0xc3,
	0x17, 0xfe, 0xd0, 0x91, 0xc2, 0xb5, 0xb9, 0xce, 0xf0, 0x0e, 0x5c, 0x18, 0xce, 0x24, 0x63, 0x07,
	0xb2, 0xcc, 0x9d, 0x90, 0x9d, 0xe6, 0xec, 0xd5, 0xdb, 0xfe, 0x84, 0xc4, 0x0c, 0x8d, 0x56, 0xd5,
	0x0f, 0x02, 0xa4, 0x43, 0xdb, 0xfe, 0x20, 0xcd, 0xa6, 0x67, 0xcf, 0x49, 0x73, 0xc3, 0xb3, 0x7f,
	0x95, 0x66, 0x86, 0xbb, 0x1e, 0x39, 0xb5, 0xde, 0x72, 0x93, 0xb2, 0x38, 0xda, 0x55, 0x6b, 0x90,
	0x89, 0x2f, 0xf7, 0x5b, 0x01, 0xdf, 0x7a, 0x05, 0x8b, 0xfc, 0x91, 0xd0, 0x2a, 0x94, 0x34, 0xbd,
	0xa1, 0x2b, 0xc6, 0x51, 0x47, 0x3b, 0x54, 0x9a, 0xea, 0x9e, 0xaa, 0xb4, 0xc4, 0x04, 0x42, 0x50,
	0x0c, 0xe1, 0x26, 0x56, 0x1a, 0xba, 0xda, 0xd9, 0x17, 0x05, 0x24, 0x42, 0x3e, 0xc4, 0x1a, 0x4d,
	0x5d, 0x7d, 0xa6, 0x88, 0x49, 0x54, 0x82, 0x42, 0x88, 0xb4, 0x94, 0xb6, 0xa2, 0x2b, 0x2d, 0x71,
	0x01, 0x2d, 0x43, 0x2e, 0x84, 0x14, 0x8c, 0xbb, 0x58, 0x4c, 0x6d, 0xbd, 0x86, 0xe5, 0x5b, 0xa1,
	0x46, 0x1b, 0x50, 0x69, 0x29, 0x9a, 0xae, 0x76, 0x1a, 0xba, 0xda, 0xed, 0x18, 0xfa, 0x8b, 0xc3,
	0xdb, 0xc7, 0x57, 0xa0, 0x7c, 0xa7, 0xe3, 0x40, 0xed, 0x28, 0x9a, 0xaa, 0x89, 0x02, 0xfa, 0x07,
	0x56, 0xee, 0x54, 0xb5, 0xba, 0x98, 0xdc, 0x7a, 0x0a, 0x29, 0x7e, 0xc0, 0x5f, 0x20, 0xce, 0x19,
	0x8a, 0xa0, 0xc8, 0xd1, 0xc6, 0x51, 0x4b, 0xd5, 0x8d, 0x76, 0x97, 0x69, 0x5a, 0x87, 0xff, 0x38,
	0xd6, 0x6c, 0x77, 0x35, 0xa5, 0x65, 0x1c, 0x77, 0xf1, 0xc1, 0x5e, 0xbb, 0x7b, 0x6c, 0x28, 0xcf,
	0x0f, 0xbb, 0x58, 0x17, 0x93, 0x8f, 0xf0, 0xc5, 0x95, 0x94, 0xb8, 0xbc, 0x92, 0x12, 0x37, 0x57,
	0x92, 0xf0, 0x2e, 0x90, 0x84, 0xcf, 0x81, 0x24, 0x7c, 0x09, 0x24, 0xe1, 0x22, 0x90, 0x84, 0xaf,
	0x81, 0x24, 0x7c, 0x0b, 0xa4, 0xc4, 0x4d, 0x20, 0x09, 0x1f, 0xaf, 0xa5, 0xc4, 0xc5, 0xb5, 0x94,
	0xb8, 0xbc, 0x96, 0x12, 0x2f, 0x2b, 0xfe, 0xd8, 0xf5, 0x46, 0x72, 0x6f, 0xe4, 0x4c, 0xfa, 0xb5,
	0xa9, 0xbf, 0xe7, 0x2e, 0xfb, 0x9e, 0xa4, 0x79, 0xa4, 0xeb, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xf9, 0x94, 0xf5, 0x95, 0x58, 0x05, 0x00, 0x00,
}

func (x State) String() string {
	s, ok := State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DestinationType) String() string {
	s, ok := DestinationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Type) String() string {
	s, ok := Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *KinesisSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KinesisSpec)
	if !ok {
		that2, ok := that.(KinesisSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssumedRole != that1.AssumedRole {
		return false
	}
	if this.DestinationUri != that1.DestinationUri {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *KinesisStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KinesisStatus)
	if !ok {
		that2, ok := that.(KinesisStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *SinkSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SinkSpec)
	if !ok {
		that2, ok := that.(SinkSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sink != that1.Sink {
		return false
	}
	if this.SinkType != that1.SinkType {
		return false
	}
	if this.DestinationType != that1.DestinationType {
		return false
	}
	if !this.KinesisSink.Equal(that1.KinesisSink) {
		return false
	}
	if !this.S3Sink.Equal(that1.S3Sink) {
		return false
	}
	return true
}
func (this *Sink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sink)
	if !ok {
		that2, ok := that.(Sink)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sink != that1.Sink {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.LastSucceededTime.Equal(that1.LastSucceededTime) {
		return false
	}
	if !this.KinesisStatus.Equal(that1.KinesisStatus) {
		return false
	}
	if !this.S3Status.Equal(that1.S3Status) {
		return false
	}
	return true
}
func (this *S3Spec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S3Spec)
	if !ok {
		that2, ok := that.(S3Spec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssumedRole != that1.AssumedRole {
		return false
	}
	if this.DestinationArn != that1.DestinationArn {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *S3Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S3Status)
	if !ok {
		that2, ok := that.(S3Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *KinesisSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sink.KinesisSpec{")
	s = append(s, "AssumedRole: "+fmt.Sprintf("%#v", this.AssumedRole)+",\n")
	s = append(s, "DestinationUri: "+fmt.Sprintf("%#v", this.DestinationUri)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KinesisStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sink.KinesisStatus{")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SinkSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&sink.SinkSpec{")
	s = append(s, "Sink: "+fmt.Sprintf("%#v", this.Sink)+",\n")
	s = append(s, "SinkType: "+fmt.Sprintf("%#v", this.SinkType)+",\n")
	s = append(s, "DestinationType: "+fmt.Sprintf("%#v", this.DestinationType)+",\n")
	if this.KinesisSink != nil {
		s = append(s, "KinesisSink: "+fmt.Sprintf("%#v", this.KinesisSink)+",\n")
	}
	if this.S3Sink != nil {
		s = append(s, "S3Sink: "+fmt.Sprintf("%#v", this.S3Sink)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Sink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&sink.Sink{")
	s = append(s, "Sink: "+fmt.Sprintf("%#v", this.Sink)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.LastSucceededTime != nil {
		s = append(s, "LastSucceededTime: "+fmt.Sprintf("%#v", this.LastSucceededTime)+",\n")
	}
	if this.KinesisStatus != nil {
		s = append(s, "KinesisStatus: "+fmt.Sprintf("%#v", this.KinesisStatus)+",\n")
	}
	if this.S3Status != nil {
		s = append(s, "S3Status: "+fmt.Sprintf("%#v", this.S3Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S3Spec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sink.S3Spec{")
	s = append(s, "AssumedRole: "+fmt.Sprintf("%#v", this.AssumedRole)+",\n")
	s = append(s, "DestinationArn: "+fmt.Sprintf("%#v", this.DestinationArn)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *S3Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sink.S3Status{")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *KinesisSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KinesisSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KinesisSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationUri) > 0 {
		i -= len(m.DestinationUri)
		copy(dAtA[i:], m.DestinationUri)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DestinationUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssumedRole) > 0 {
		i -= len(m.AssumedRole)
		copy(dAtA[i:], m.AssumedRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AssumedRole)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KinesisStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KinesisStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KinesisStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SinkSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SinkSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SinkSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S3Sink != nil {
		{
			size, err := m.S3Sink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.KinesisSink != nil {
		{
			size, err := m.KinesisSink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DestinationType))
		i--
		dAtA[i] = 0x18
	}
	if m.SinkType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SinkType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sink) > 0 {
		i -= len(m.Sink)
		copy(dAtA[i:], m.Sink)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sink)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.S3Status != nil {
		{
			size, err := m.S3Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.KinesisStatus != nil {
		{
			size, err := m.KinesisStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LastSucceededTime != nil {
		{
			size, err := m.LastSucceededTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sink) > 0 {
		i -= len(m.Sink)
		copy(dAtA[i:], m.Sink)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Sink)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S3Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3Spec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3Spec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationArn) > 0 {
		i -= len(m.DestinationArn)
		copy(dAtA[i:], m.DestinationArn)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DestinationArn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssumedRole) > 0 {
		i -= len(m.AssumedRole)
		copy(dAtA[i:], m.AssumedRole)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AssumedRole)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S3Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KinesisSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssumedRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.DestinationUri)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *KinesisStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SinkSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sink)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SinkType != 0 {
		n += 1 + sovMessage(uint64(m.SinkType))
	}
	if m.DestinationType != 0 {
		n += 1 + sovMessage(uint64(m.DestinationType))
	}
	if m.KinesisSink != nil {
		l = m.KinesisSink.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.S3Sink != nil {
		l = m.S3Sink.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Sink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sink)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastSucceededTime != nil {
		l = m.LastSucceededTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.KinesisStatus != nil {
		l = m.KinesisStatus.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.S3Status != nil {
		l = m.S3Status.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *S3Spec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssumedRole)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.DestinationArn)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *S3Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *KinesisSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KinesisSpec{`,
		`AssumedRole:` + fmt.Sprintf("%v", this.AssumedRole) + `,`,
		`DestinationUri:` + fmt.Sprintf("%v", this.DestinationUri) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KinesisStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KinesisStatus{`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SinkSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SinkSpec{`,
		`Sink:` + fmt.Sprintf("%v", this.Sink) + `,`,
		`SinkType:` + fmt.Sprintf("%v", this.SinkType) + `,`,
		`DestinationType:` + fmt.Sprintf("%v", this.DestinationType) + `,`,
		`KinesisSink:` + strings.Replace(this.KinesisSink.String(), "KinesisSpec", "KinesisSpec", 1) + `,`,
		`S3Sink:` + strings.Replace(this.S3Sink.String(), "S3Spec", "S3Spec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Sink) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Sink{`,
		`Sink:` + fmt.Sprintf("%v", this.Sink) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`LastSucceededTime:` + strings.Replace(fmt.Sprintf("%v", this.LastSucceededTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`KinesisStatus:` + strings.Replace(this.KinesisStatus.String(), "KinesisStatus", "KinesisStatus", 1) + `,`,
		`S3Status:` + strings.Replace(this.S3Status.String(), "S3Status", "S3Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S3Spec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S3Spec{`,
		`AssumedRole:` + fmt.Sprintf("%v", this.AssumedRole) + `,`,
		`DestinationArn:` + fmt.Sprintf("%v", this.DestinationArn) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S3Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S3Status{`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KinesisSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KinesisSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KinesisSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssumedRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssumedRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KinesisStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KinesisStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KinesisStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SinkSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SinkSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SinkSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinkType", wireType)
			}
			m.SinkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SinkType |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationType", wireType)
			}
			m.DestinationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationType |= DestinationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinesisSink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KinesisSink == nil {
				m.KinesisSink = &KinesisSpec{}
			}
			if err := m.KinesisSink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Sink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S3Sink == nil {
				m.S3Sink = &S3Spec{}
			}
			if err := m.S3Sink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSucceededTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastSucceededTime == nil {
				m.LastSucceededTime = &types.Timestamp{}
			}
			if err := m.LastSucceededTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KinesisStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KinesisStatus == nil {
				m.KinesisStatus = &KinesisStatus{}
			}
			if err := m.KinesisStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S3Status == nil {
				m.S3Status = &S3Status{}
			}
			if err := m.S3Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3Spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3Spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssumedRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssumedRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
